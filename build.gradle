plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'java'
}

group = 'com.SoloLevelingSystem'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

minecraft {
    mappings channel: 'official', version: '1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory = project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=solo_leveling_system.mixins.json"

            mods {
                solo_leveling_system {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory = project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=solo_leveling_system.mixins.json"
            args '--nogui'

            mods {
                solo_leveling_system {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url = 'https://maven.minecraftforge.net/'
        name = 'Forge'
    }
    maven {
        url = 'https://repo.spongepowered.org/repository/maven-public/'
        name = 'Sponge'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-47.3.0"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Configuración específica de recursos
sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
            exclude 'config/**' // Excluir la carpeta config del procesamiento normal
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    inputs.property 'version', version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
        exclude 'config/**'
    }

    // Procesar archivos de configuración por separado
    from(sourceSets.main.resources.srcDirs) {
        include 'config/**'
        duplicatesStrategy = DuplicatesStrategy.FAIL // Fallar si hay duplicados en config
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title': 'solo_leveling_system',
                'Specification-Vendor': 'plonco',
                'Specification-Version': '1',
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Vendor': 'plonco',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLModType': 'GAMELIBRARY',
                'MixinConfigs': 'solo_leveling_system.mixins.json'
        ])
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    finalizedBy 'reobfJar'
}

// Tarea para limpiar archivos de configuración duplicados
task cleanDuplicateConfigs {
    doLast {
        def configFiles = fileTree(dir: 'src/main/resources').include('**/config.toml').files +
                fileTree(dir: 'config').include('**/config.toml').files

        configFiles.groupBy { it.name }.each { name, files ->
            if (files.size() > 1) {
                files.drop(1).each {
                    it.delete()
                    println "Deleted duplicate config file: ${it.absolutePath}"
                }
            }
        }
    }
}

// Asegurar que la limpieza de duplicados se ejecute antes de processResources
processResources.dependsOn cleanDuplicateConfigs