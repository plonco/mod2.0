plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
}

group = 'com.SoloLevelingSystem'
version = '1.0.0'

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
    withSourcesJar()
}

base {
    archivesName = 'solo_leveling_system'
}

minecraft {
    mappings channel: 'official', version: '1.20.1'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                solo_leveling_system {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--nogui'

            mods {
                solo_leveling_system {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url = 'https://maven.minecraftforge.net/'
        name = 'Forge'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-47.3.0"
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
}

tasks.named('jar') { jar ->
    jar.manifest {
        attributes([
                'Specification-Title': 'solo_leveling_system',
                'Specification-Vendor': 'plonco',
                'Specification-Version': '1',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'plonco',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    jar.finalizedBy 'reobfJar'
}

shadowJar {
    archiveClassifier.set('')
    dependencies {
        exclude(dependency('net.minecraftforge:forge'))
    }

    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    relocate 'com.moandjiezana.toml', 'shadow.com.moandjiezana.toml'

    manifest {
        inheritFrom tasks.jar.manifest
    }
}

reobf {
    jar {}
}

tasks.build.dependsOn tasks.shadowJar
tasks.shadowJar.finalizedBy 'reobfJar'

artifacts {
    archives jar
    archives shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:deprecation'
    options.compilerArgs << '-Xlint:unchecked'
}

// AsegÃºrate de que las tareas se ejecuten en el orden correcto
tasks.named('reobfJar') {
    dependsOn tasks.jar
}